---
import { SparklesCore } from "@components/ui/sparkles"

interface Props {
  text?: string
}

const { text = "" } = Astro.props
---

<div
  class="flex w-full flex-col items-center justify-center overflow-hidden rounded-md bg-background"
>
  <h1
    class="relative z-20 text-center text-6xl font-bold xs:text-5xl md:text-7xl lg:text-8xl"
  >
    {text}
  </h1>
  <div class="relative h-40 w-full">
    <!-- Gradients -->
    <div
      class="absolute inset-x-20 top-0 h-[2px] w-3/4 bg-gradient-to-r from-transparent via-primary to-transparent blur-sm"
    >
    </div>
    <div
      class="absolute inset-x-20 top-0 h-px w-3/4 bg-gradient-to-r from-transparent via-primary to-transparent"
    >
    </div>
    <div
      class="absolute inset-x-60 top-0 h-[5px] w-1/4 bg-gradient-to-r from-transparent via-primary to-transparent blur-sm"
    >
    </div>
    <div
      class="absolute inset-x-60 top-0 h-px w-1/4 bg-gradient-to-r from-transparent via-primary to-transparent"
    >
    </div>

    <!-- Core component -->
    <SparklesCore
      client:load
      background="transparent"
      minSize={0.4}
      maxSize={1}
      particleDensity={1200}
      className="h-full w-full"
      particleColor="#f39159"
    />

    <!-- Radial Gradient to prevent sharp edges -->
    <div
      class="absolute inset-0 h-full w-full bg-background [mask-image:radial-gradient(350px_200px_at_top,transparent_20%,white)]"
    >
    </div>
  </div>
</div>

<script>
  function updateTheme() {
    const theme = localStorage.getItem("theme") || "dark"
    if (document.documentElement.getAttribute("data-theme") !== theme) {
      document.documentElement.setAttribute("data-theme", theme)
    }
  }

  // Run on initial load
  updateTheme()

  window.addEventListener("storage", event => {
    if (event.key === "theme") {
      updateTheme()
    }
  })

  const observer = new MutationObserver(mutations => {
    mutations.forEach(mutation => {
      if (
        mutation.type === "attributes" &&
        mutation.attributeName === "data-theme"
      ) {
        const newTheme =
          document.documentElement.getAttribute("data-theme") ?? "dark"
        localStorage.setItem("theme", newTheme)
      }
    })
  })
  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ["data-theme"]
  })
</script>
